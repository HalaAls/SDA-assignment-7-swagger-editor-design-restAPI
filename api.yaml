openapi: 3.0.3

info:
  version: 1.0.0
  title: E-commerce API
  description: API for E-commerce App
  contact:
    email: alsuwait.ha@gmail.com

servers:
  - url: http://localhost:3001

tags:
  - name: products
    description: everything about products
  - name: users
    description: everything about users
  - name: categories
    description: everything about categories
  - name: orders
    description: everything about orders

components:
  schemas:
    Product:
      type: object
      required:
        - title
        - price
        - category

      properties:
        id:
          type: string
          description: the id will be auto generated in the backend
        title:
          type: string
          description: the title of the product
        price:
          type: number
          description: the price of the product
        description:
          type: string
          description: the description of the product
        categories:
          type: array
          items:
            $ref: "#/components/schemas/Category"
          description: array of product categories
        image:
          type: string
          description: the url of the product image
        rating:
          type: object
          properties:
            rate:
              type: number
            count:
              type: number
      example:
        id: 1
        title: Surface Pro 9
        price: 1500
        description: 2 in 1 tablet
        category: tablet
        image: https://cdn-dynmedia-1.microsoft.com/is/image/microsoftcorp/MSFT-Surface-Pro-9-for-Business-mobile-Poster-RE50MGf?scl=1
        rating:
          rate: 4.2
          count: 189

    User:
      type: object
      required:
        - name
        - email
        - password

      properties:
        id:
          type: string
          description: the id will be auto generated in the backend
        name:
          type: string
          description: the name of the user
        email:
          type: string
          description: the email of the user
        password:
          type: string
          description: the password of the user
      example:
        id: 1
        name: Hsls
        email: alsuwait.ha@gmail.com
        password: 123!abc

    Category:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          description: the id will be auto generated in the backend
        name:
          type: string
          description: the name of the category
        description:
          type: string
          description: the description of the category
      example:
        id: 1
        name: Tablets

    Order:
      type: object
      required:
        - userId
        - purchasedAt
        - productId
      properties:
        id:
          type: string
          description: the id will be auto generated in the backend
        userId:
          type: string
          description: the id of the user how ordered the product
        purchasedAt:
          type: number
          description: the date and time of purchase
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product"'
          description: array of the purchased products
        totalPrice:
          type: number
          description: the total price of the purchases

      example:
        id: 1
        userId: 11
        purchasedAt: 10-8-2023 17:08:00

paths:
  /products:
    get:
      tags:
        - products
      summary: get a list of all products
      parameters:
        - in: query
          name: page
          schema:
            type: number
          required: false
        - in: query
          name: limit
          schema:
            type: number
          required: false
        - in: query
          name: sortBy
          schema:
            type: string
            enum:
              - "asc"
              - "desc"
          required: false

      responses:
        200:
          description: all the products are returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        500:
          description: server error
    post:
      tags:
        - products
      summary: create a new product
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        201:
          description: a new product is created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        500:
          description: server error

  /products/{productId}:
    get:
      tags:
        - products
      summary: get a single product by id
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
      responses:
        200:
          description: single product is returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        404:
          description: product not found
        500:
          description: server error
    delete:
      tags:
        - products
      summary: delete a single product by id
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string
      responses:
        200:
          description: single product is deleted
        404:
          description: product not found
        500:
          description: server error
    put:
      tags:
        - products
      summary: update a single products
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: string

      responses:
        200:
          description: updated single product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        404:
          description: product not found
        500:
          description: server error

  /products/search:
    get:
      tags:
        - products
      summary: search products by name
      parameters:
        - in: query
          name: search
          required: true
          schema:
            type: string
      responses:
        200:
          description: all the products are returned based on the search value
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        500:
          description: server error

  /users:
    get:
      tags:
        - users
      summary: get a list of all users
      responses:
        200:
          description: all the users are returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        500:
          description: server error
    post:
      tags:
        - users
      summary: create a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: a new user is created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        500:
          description: server error

  /users/{userId}:
    get:
      tags:
        - users
      summary: get a single user by id
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        200:
          description: single user is returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: user not found
        500:
          description: server error
    delete:
      tags:
        - users
      summary: delete a single user by id
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        200:
          description: single user is deleted
        404:
          description: user not found
        500:
          description: server error
    put:
      tags:
        - users
      summary: update single user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string

      responses:
        200:
          description: single user is updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: user not found
        500:
          description: server error

  /users/search:
    get:
      tags:
        - users
      summary: search users by name
      parameters:
        - in: query
          name: search
          required: true
          schema:
            type: string
      responses:
        200:
          description: all the users are returned based on the search value
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        500:
          description: server error

  /categories:
    get:
      tags:
        - categories
      summary: get a list of all categories
      responses:
        200:
          description: all the categories are returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
        500:
          description: server error
    post:
      tags:
        - categories
      summary: create a new category
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        201:
          description: a new category is created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        500:
          description: server error

  /categories/{categoryId}:
    get:
      tags:
        - categories
      summary: get a single category by id
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: string
      responses:
        200:
          description: single category is returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        404:
          description: category not found
        500:
          description: server error
    delete:
      tags:
        - categories
      summary: delete single category by id
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: string
      responses:
        200:
          description: single category is deleted
        404:
          description: category not found
        500:
          description: server error
    put:
      tags:
        - categories
      summary: update single category
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      parameters:
        - in: path
          name: categoryId
          required: true
          schema:
            type: string

      responses:
        200:
          description: single category is updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        404:
          description: category not found
        500:
          description: server error

  /categories/search:
    get:
      tags:
        - categories
      summary: search categories by name
      parameters:
        - in: query
          name: search
          required: true
          schema:
            type: string
      responses:
        200:
          description: all the categories are returned based on the search value
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
        500:
          description: server error

  /orders:
    get:
      tags:
        - orders
      summary: get a list of all orders
      responses:
        200:
          description: all the orders are returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        500:
          description: server error
    post:
      tags:
        - orders
      summary: create a new order
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        201:
          description: a new order is created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        500:
          description: server error

  /orders/{orderId}:
    get:
      tags:
        - orders
      summary: get a single order by id
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
      responses:
        200:
          description: single order is returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        404:
          description: order not found
        500:
          description: server error
    delete:
      tags:
        - orders
      summary: delete single order by id
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
      responses:
        200:
          description: single order is deleted
        404:
          description: order not found
        500:
          description: server error
    put:
      tags:
        - orders
      summary: update single order
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string

      responses:
        200:
          description: single order is updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        404:
          description: order not found
        500:
          description: server error
